# Generated by Django 5.1.1 on 2024-09-18 14:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='название')),
                ('category', models.CharField(blank=True, choices=[('1', 'Вымирающие виды'), ('2', 'Уязвимые виды'), ('3', 'Редкие виды'), ('4', 'Неопределенные виды'), ('5', 'Восстанавливающиеся виды')], max_length=20, null=True, verbose_name='категория')),
                ('location', models.CharField(blank=True, max_length=200, null=True, verbose_name='место')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='широта')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='долгота')),
                ('description', models.TextField(blank=True, max_length=1000, verbose_name='описание')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='observations/', verbose_name='фото')),
                ('observer_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='ваше ФИО')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='номер телефона')),
                ('date_time', models.DateTimeField(blank=True, null=True, verbose_name='дата и время наблюдения')),
                ('status', models.BooleanField(default=False, verbose_name='обработанное/необработанное')),
                ('erroneous', models.BooleanField(default=False, verbose_name='ошибочное наблюдение')),
            ],
            options={
                'verbose_name': 'наблюдение',
                'verbose_name_plural': 'наблюдения',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='отряд')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание отряда')),
            ],
            options={
                'verbose_name': 'отряд',
                'verbose_name_plural': 'отряды',
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='название сектора')),
                ('code', models.CharField(blank=True, max_length=255, null=True, verbose_name='код сектора')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание сектора')),
                ('sector_type', models.CharField(blank=True, choices=[('PUBLIC', 'Общественный'), ('PRIVATE', 'Частный')], max_length=255, null=True, verbose_name='тип сектора')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='широта')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='долгота')),
            ],
            options={
                'verbose_name': 'сектор',
                'verbose_name_plural': 'сектора',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, max_length=255, verbose_name='отчество')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='дата рождения')),
                ('is_moderator', models.BooleanField(default=False, verbose_name='модератор')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='семейство')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание семейства')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='families', to='core.order', verbose_name='отряд')),
            ],
            options={
                'verbose_name': 'семейство',
                'verbose_name_plural': 'семейства',
            },
        ),
        migrations.CreateModel(
            name='RedBookEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='название')),
                ('latin_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='латинское название')),
                ('category', models.CharField(blank=True, choices=[('1', 'Вымирающие виды'), ('2', 'Уязвимые виды'), ('3', 'Редкие виды'), ('4', 'Неопределенные виды'), ('5', 'Восстанавливающиеся виды')], max_length=1, null=True, verbose_name='категория')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание')),
                ('image', models.ImageField(blank=True, null=True, upload_to='red_book_images/', verbose_name='фото')),
                ('public', models.BooleanField(default=True, verbose_name='опубликованная информация')),
                ('family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='core.family', verbose_name='семейство')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='core.order', verbose_name='отряд')),
                ('sector', models.ManyToManyField(blank=True, related_name='red_book_entry', to='core.sector', verbose_name='сектора')),
            ],
            options={
                'verbose_name': 'запись в красной книге',
                'verbose_name_plural': 'записи в красной книге',
            },
        ),
    ]
